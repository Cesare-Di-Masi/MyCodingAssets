#!/usr/bin/env python3
import os
from collections import defaultdict

LANG_EXTENSIONS = {
    'Python': ['.py'],
    'JavaScript': ['.js', '.jsx', '.ts', '.tsx'],
    'Java': ['.java'],
    'C++': ['.cpp', '.cxx', '.cc', '.hpp', '.h'],
    'C': ['.c', '.h'],
    'C#': ['.cs'],
    'Kotlin': ['.kt', '.kts'],
    'Rust': ['.rs'],
    'Ruby': ['.rb'],
    'PHP': ['.php'],
    'HTML': ['.html', '.htm'],
    'CSS': ['.css'],
    'Shell': ['.sh', '.bash'],
    'Markdown': ['.md'],
    'JSON': ['.json'],
    'YAML': ['.yml', '.yaml'],
    'XML': ['.xml'],
    'Batch': ['.bat'],
    'XAML': ['.xaml'],
    'Assembly': ['.asm', '.s'],
    'Pascal': ['.pas'],
    'Other': []
}

def detect_language(filename):
    _, ext = os.path.splitext(filename.lower())
    for lang, extensions in LANG_EXTENSIONS.items():
        if ext in extensions:
            return lang
    return 'Other'

def count_lines(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
            return sum(1 for _ in f)
    except Exception:
        return 0

def main():
    # Path assoluto dello script attuale
    script_dir = os.path.abspath(os.path.dirname(__file__))

    # Trova la root del progetto salendo finch√© non trovi una directory `.git`
    current = script_dir
    while current != '/':
        if os.path.isdir(os.path.join(current, '.git')):
            repo_root = current
            break
        current = os.path.dirname(current)
    else:
        print("Errore: .git non trovato.")
        return

    os.chdir(repo_root)

    stats = defaultdict(lambda: {'files': 0, 'lines': 0})
    excluded_dirs = {'.git', '__pycache__', '.mypy_cache', '.idea', '.vscode'}

    for root, dirs, files in os.walk(repo_root):
        dirs[:] = [d for d in dirs if d not in excluded_dirs]

        for file in files:
            if file == 'README.md':
                continue

            path = os.path.join(root, file)
            lang = detect_language(file)
            stats[lang]['files'] += 1
            stats[lang]['lines'] += count_lines(path)

    total_files = sum(data['files'] for data in stats.values())
    total_lines = sum(data['lines'] for data in stats.values())

    with open("README.md", "w", encoding="utf-8") as f:
        f.write("# Repository Summary\n\n")
        f.write("This file is auto-generated by `update_readme.py`.\n\n")
        f.write("| Language | Files | Lines |\n")
        f.write("|----------|------:|------:|\n")
        for lang in sorted(stats):
            f.write(f"| {lang:9} | {stats[lang]['files']:5} | {stats[lang]['lines']:5} |\n")
        f.write(f"\n**Total files:** {total_files}\n")
        f.write(f"**Total lines:** {total_lines}\n")

if __name__ == "__main__":
    main()
